CREATE TABLE Admin(
	AdminId INT not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_Admin PRIMARY KEY(AdminId),
	AspNetUserId varchar(128) not null,
	CONSTRAINT fk_Admin
	FOREIGN KEY (AspNetUserId)
	REFERENCES AspNetUsers(Id),
	FirstName varchar(100) not null,
	LastName varchar(100),
	Email varchar(50) not null,
	Mobile varchar(20),
	Address1 varchar(500),
	Address2 varchar(500),
	RegionId int,
	Zip varchar(10),
	AltPhone varchar(20),
	CreatedBy varchar(128) not null,
	CreatedDate timestamp not null,
	ModifiedBy varchar(128),
	ModifiedDate TIMESTAMP,
	Status smallint,
	IsDeleted bit,
	RoleId int
)
ALTER TABLE Admin
    ADD CONSTRAINT fk_admin4 FOREIGN KEY (RoleId) REFERENCES AspNetUserRoles(RoleId);
ALTER TABLE Admin
    ADD CONSTRAINT fk_admin3 FOREIGN KEY (RegionId) REFERENCES Region(RegionId);
ALTER TABLE admin
    ADD CONSTRAINT fk_admin1 FOREIGN KEY (CreatedBy) REFERENCES AspNetUsers(Id);
ALTER TABLE admin
    ADD CONSTRAINT fk_admin2 FOREIGN KEY (ModifiedBy) REFERENCES AspNetUsers(Id);
	
CREATE TABLE AdminRegion(
	AdminRegionId int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_AdminRegion PRIMARY KEY(AdminRegionId),
	AdminId int not null,
	CONSTRAINT fk_AdminRegion
	FOREIGN KEY (AdminId)
	REFERENCES Admin(AdminId),
	RegionId int not null,
	CONSTRAINT fk_AdminRegion1
	FOREIGN KEY (RegionId)
	REFERENCES Region(RegionId)
)


CREATE TABLE AspNetRoles(
	id varchar(128) not null,
	CONSTRAINT pk_AspNetRole PRIMARY KEY(id),
	name varchar(256) not null
)




CREATE TABLE AspNetUserRoles(
	Userid varchar(128) not null,
	CONSTRAINT fk_AspNetUserRole
	FOREIGN KEY (Userid)
	REFERENCES AspNetUsers(id),
	
	RoleId int not null,
	CONSTRAINT pk_AspNetUserRole PRIMARY KEY(Roleid)
	
)


CREATE TABLE AspNetUsers(
	id varchar(128) not null,
	CONSTRAINT pk_AspNetUsers PRIMARY KEY(id),
	UserName varchar(256) not null,
	PasswordHash varchar ,
	
	Email varchar(256),
	
	PhoneNumber varchar ,
	
	IP varchar(20) ,
	CreatedDate timestamp not null,
	ModifiedDate timestamp
)



CREATE TABLE BlockRequests(
	BlockRequestID int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_BlockRequests PRIMARY KEY(BlockRequestId),
	PhoneNumber varchar(50) not null,
	Email varchar(50) not null,
	IsActive bit ,
	Reason varchar ,
	RequestId varchar not null,
	IP varchar(20),
	CreatedDate timestamp not null,
	ModifiedDate timestamp
)
ALTER TABLE BlockRequests ALTER COLUMN RequestId TYPE int  USING RequestId::integer;

ALTER TABLE BlockRequests
    ADD CONSTRAINT fk_blockRequests FOREIGN KEY (RequestId) REFERENCES Request(RequestId);

CREATE TABLE Business(
	BusinessId int Not Null GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_Business PRIMARY KEY(BusinessId),
	Name varchar not null,
	Address1 varchar(500),
	Address2 varchar(500),
	City varchar(50),
	RegionId int,
	CONSTRAINT fk_Business
	FOREIGN KEY (RegionId)
	REFERENCES Region(RegionId),
	ZipCode varchar(10),
	PhoneNumber varchar(20),
	FaxNumber varchar(20),
	IsRegistered bit,
	CreatedBy varchar(128) not null,
	CONSTRAINT fk_Business1
	FOREIGN KEY (CreatedBy)
	REFERENCES AspNetUsers(Id)
,
	CreatedDate Timestamp not null,
	ModifiedBy varchar,
	CONSTRAINT fk_Business2
	FOREIGN KEY (ModifiedBy)
	REFERENCES AspNetUsers(Id)
,
	ModifiedDate Timestamp,
	Status smallint,
	isDeleted bit,
	IP varchar(20)
);


CREATE TABLE CaseTag(
	CaseTagId int NOT NULL GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_CaseTag PRIMARY KEY(CaseTagId),
	Name varchar(50) NOT NULL
);

CREATE TABLE Concierge(
	ConciergeId int NOT NULL GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_Concierge PRIMARY KEY(ConciergeId),
	ConciergeName varchar(100) NOT NULL,
	Address varchar(150) ,
	Street varchar(50) NOT NULL, 
	City varchar(50) NOT NULL,
	State varchar(50) NOT NULL,
	ZipCode varchar(50) NOT NULL,
	CreatedDate timestamp NOT NULL,
	RegionId int NOT NULL,
	CONSTRAINT fk_Concierge
	FOREIGN KEY(RegionId) 
	REFERENCES Region(RegionId),
	RoleId int
);

CREATE TABLE EmailLog(
	EmailLogID  int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_EmailLog PRIMARY KEY(EmailLogId),
	EmailTemplate varchar not null,
	SubjectName varchar(200) not null,
	EmailID varchar(200) not null,
	ConfirmationNumber varchar(200),
	FilePath varchar,
	RoleId int,
	RequestId int,
	CONSTRAINT fk_EmailLog1
	FOREIGN KEY (RequestId)
	REFERENCES Request(RequestId),
	AdminId int,
	CONSTRAINT fk_EmailLog2
	FOREIGN KEY (AdminId)
	REFERENCES Admin(AdminId),
	PhysicianId int,
	CONSTRAINT fk_EmailLog3
	FOREIGN KEY (PhysicianId)
	REFERENCES Physician(PhysicianId),
	CreateDate timestamp not null,
	SentDate timestamp,
	IsEmailSent bit,
	sentTries int,
	Action int
);


CREATE TABLE HealthProfessionals(
	VendorId int NOT NULL GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_HealthProfessionals PRIMARY KEY(VendorId),
	VendorName varchar(100) not null,
	Profession int,
	CONSTRAINT fk_HealthProfessional
    FOREIGN KEY (Profession)
    REFERENCES HealthProfessionalType(HealthProfessionalId),
	FAXNumber varchar(50) not null,
	Address varchar(150),
	City varchar(100),
	State varchar(50),
	Zip varchar(50),
	RegionId int,
	CONSTRAINT fk_HealthProfessionals FOREIGN KEY(RegionId) REFERENCES Region(RegionId),
	CreatedDate timestamp not null,
	ModifiedDate timestamp,
	PhoneNumber varchar(100),
	IsDeleted bit ,
	IP varchar(20),
	Email varchar(50),
	BusinessContact varchar(100)
);

CREATE TABLE HealthProfessionalType(
	HealthProfessionalId int NOT NULL GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_HealthProfessionalType PRIMARY KEY(HealthProfessionalId),
	ProfessionName varchar(50) NOT NULL,
	CreatedDate timestamp NOT NULL,
	IsActive bit,
	IsDeleted bit
);




CREATE TABLE Menu(
	MenuId int NOT NULL GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_Menu PRIMARY KEY(MenuId),
	Name varchar(50) NOT NULL,
	AccountType smallint NOT NULL,
	SortOrder int
);


CREATE TABLE OrderDetails (
	Id int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_OrderDetails PRIMARY KEY(Id)
,
	VendorId int,
	CONSTRAINT fk_OrderDetails
	FOREIGN KEY (VendorId)
	REFERENCES HealthProfessionals(VendorId),
	RequestId int,
	CONSTRAINT fk_OrderDetails1
	FOREIGN KEY (RequestId)
	REFERENCES Request(RequestId),
	FaxNumber varchar(50),
	Email varchar(50),
	BusinessContact varchar(100),
	Prescription varchar,
	NoOfRefill int,
	CreatedDate timestamp,
	CreatedBy varchar(100)
);

CREATE TABLE Physician (
	PhysicianId int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_Physician PRIMARY KEY(PhysicianId),
	AspNetUserId varchar(128),
	CONSTRAINT fk_Physician
	FOREIGN KEY (AspNetUserId)
	REFERENCES AspNetUsers(Id)
,
	FirstName varchar(100) not null,
	LastName varchar(100),
	Email varchar(50) not null,
	Mobile varchar(20),
	MedicalLicense varchar(500),
	Photo varchar(100),
	AdminNotes varchar(500),
	IsAgreementDoc bit,
	IsBackgroundDoc bit,
	IsTrainingDoc bit,
	IsNonDisclosureDoc bit,
	Address1 varchar(500),
	Address2 varchar(500),
	City varchar(100),
	RegionId int,
	CONSTRAINT fk_Physician1
	FOREIGN KEY (RegionId)
	REFERENCES Region(RegionId),
	Zip varchar(10),
	AltPhone varchar(20),
	CreatedBy varchar(128) not null,
	CONSTRAINT fk_Physician3
	FOREIGN KEY (CreatedBy)
	REFERENCES AspNetUsers(Id)
,
	CreatedDate timestamp not null,
	ModifiedBy varchar(128),
	CONSTRAINT fk_Physician2
	FOREIGN KEY (ModifiedBy)
	REFERENCES AspNetUsers(Id)
,
	ModifiedDate timestamp,
	Status smallint,
	BusinessName varchar(100) not null,
	BusinessWebsite varchar(200) not null,
	IsDeleted bit,
	RoleId int,
	NPINumber varchar(500),
	IsLicenseDoc bit,
	Signature varchar(500),
	IsCredentialDoc bit,
	IsTokenGenerate bit,
	SyncEmailAddress varchar(50)
);


CREATE TABLE PhysicianLocation(
	LocationId int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_PhysicianLocation PRIMARY KEY(LocationId),
	PhysicianId int not null,
	CONSTRAINT fk_PhysicianLocation
	FOREIGN KEY (PhysicianId)
	REFERENCES Physician(PhysicianId),
	Latitude numeric(9,3),
	Longitude numeric(9,3),
	CreatedDate timestamp,
	PhysicianName varchar(50),
	Address varchar(500)

);



CREATE TABLE PhysicianNotification(
	id int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_PhysicianNotification PRIMARY KEY(id)
,
	PysicianId int not null,
	CONSTRAINT fk_PhysicianNotification
    FOREIGN KEY(PysicianId)
    REFERENCES Physician(PhysicianId),
	IsNotificationStopped bit not null
);


CREATE TABLE PhysicianRegion(
	PhysicianRegionId int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_PhysicianRegion PRIMARY KEY(PhysicianRegionId),
	PhysicianId int not null,
	CONSTRAINT fk_PhysicianRegion
     FOREIGN KEY(Physicianid)
      REFERENCES Physician(PhysicianId),
	RegionId int not null,
	CONSTRAINT fk_PhysicianRegion1
     FOREIGN KEY(RegionId)
      REFERENCES Region(RegionId)
);



CREATE TABLE Region(
	RegionId int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_Region PRIMARY KEY(RegionId),
	Name varchar(50) not null,
	Abbreviation varchar(50)
);


CREATE TABLE Request(
	RequestId int not null GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_Request PRIMARY KEY(RequestId),
	RequestTypeId int not null,
	CONSTRAINT fk_Request
    FOREIGN KEY(RequestTypeId)
    REFERENCES RequestType(RequestTypeId),
	UserId int,
	CONSTRAINT fk_Request1
    FOREIGN KEY(UserId)
	REFERENCES Users(UserId),
	FirstName varchar(100),
	LastName varchar(100),
	PhoneNumber varchar(23),
	Email varchar(50),
	Status smallint not null,
	PhysicianId int,
	CONSTRAINT fk_Request2
	FOREIGN KEY (PhysicianId)
	REFERENCES Physician(PhysicianId),
	ConfirmationNumber varchar(20),
	CreatedDate timestamp not null,
	IsDeleted bit,
	ModifiedDate timestamp,
	DeclinedBy varchar(250),
	IsUrgentEmailSent bit not null,
	LastWellnessDate timestamp,
	IsMobile bit,
	CallType smallint,
	CompletedByPhysician bit,
	LastReservationDate timestamp,
	AcceptedDate timestamp,
	RelationName varchar(100),
	CaseNumber varchar(50),
	IP varchar(20),
	CaseTag varchar(50),
	CaseTagPhysician varchar(50),
	PatientAccountId varchar(128),
	CreatedUserId int
);


CREATE TABLE RequestBusiness(
	RequestBusinessId int not null GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_RequestBusiness PRIMARY KEY(RequestBusinessId),
	RequestId int not null,
	CONSTRAINT fk_RequestBusiness
     FOREIGN KEY (RequestId)
      REFERENCES Request(RequestId),
	BusinessId int not null,
	CONSTRAINT fk_RequestBusiness1
     FOREIGN KEY (BusinessId)
      REFERENCES Business(BusinessId),
	IP varchar(20)
);	



CREATE TABLE RequestClient(
	RequestClientId int not null GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_RequestClient PRIMARY KEY(RequestClientId),
	RequestId int not null,
	CONSTRAINT fk_RequestClient
    FOREIGN KEY (RequestId)
    REFERENCES Request(RequestId),
	FirstName varchar(100) not null,
	LastName varchar(100),	
	PhoneNumber varchar(23),
	Location varchar(100),
	Address varchar(500),
	RegionId int not null,
	CONSTRAINT fk_RequestClient1
    FOREIGN KEY (RegionId)
    REFERENCES Region(RegionId),
	NotiMobile varchar(20),	
	NotiEmail varchar(50),
	Notes varchar(500),
	Email varchar(50),
	strMonth varchar(20),
	intYear int,
	intDate int,
	isMobile bit,
	Street varchar(100),	
	City varchar(100),
	State varchar(100),
	ZipCode varchar(10),
	CommunicationType smallint,
	RemindReservationCount smallint,
	RemindHouseCallCount smallint,
	IsSetFollowupSent smallint,
	IP varchar(20),
	IsReservationReminderSent smallint,
	Latitude numeric(10,3),
	Longitude numeric(10,3)
);	

CREATE TABLE RequestClosed(
	RequestClosedId int not null GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_RequestClosed PRIMARY KEY(RequestClosedId),
	RequestId int not null,
	CONSTRAINT fk_RequestClosed
     FOREIGN KEY (RequestId)
      REFERENCES Request(RequestId),
	RequestStatusLogId int not null,
	CONSTRAINT fk_RequestClosed1
     FOREIGN KEY (RequestStatusLogId)
      REFERENCES RequestStatusLog(RequestStatusLogId),
	PhyNotes varchar(500),	
	ClientNotes varchar(500),
	IP varchar(20)
);


CREATE TABLE RequestConcierge(
	Id int not null GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_RequestConcierge PRIMARY KEY(Id)
,
	RequestId int not null,
	CONSTRAINT fk_RequestConcierge
     FOREIGN KEY (RequestId)
      REFERENCES Request(RequestId),
	ConciergeId int not null,
	CONSTRAINT fk_RequestConcierge1
     FOREIGN KEY (ConciergeId)
      REFERENCES Concierge(ConciergeId),
	IP varchar(20)
);

CREATE TABLE RequestNotes(
	RequestNotesId int not null GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_RequestNotes PRIMARY KEY(RequestNotesId),
	RequestId int not  null,
	CONSTRAINT fk_RequestNotes
     FOREIGN KEY (RequestId)
      REFERENCES Request(RequestId),
	strMonth varchar(20),
	intYear int,
	intDate int,
	PhysicianNotes varchar(500),
	AdminNotes varchar(500),
	CreatedBy varchar(128) not null,
	CreatedDate timestamp not null,
	ModifiedBy varchar(128),
	ModifiedDate timestamp,
	IP varchar(20),
	AdministrativeNotes varchar(500)
);

CREATE TABLE RequestStatusLog(
	RequestStatusLogId int not null GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_RequestStatusLog PRIMARY KEY(RequestStatusLogId),
	RequestId int not null,
	CONSTRAINT fk_RequestStatusLog 
     FOREIGN KEY (RequestId)
      REFERENCES Request(RequestId),
	Status smallint not null,
	PhysicianId int,
	CONSTRAINT fk_RequestStatusLog1  
     FOREIGN KEY (PhysicianId)
      REFERENCES Physician(PhysicianId),
	AdminId int,
	CONSTRAINT fk_RequestStatusLog2 
     FOREIGN KEY (AdminId)
      REFERENCES Admin(AdminId),
	TransToPhysicianId int,
	CONSTRAINT fk_RequestStatusLog4
     FOREIGN KEY (TransToPhysicianId)
      REFERENCES Physician(PhysicianId),
	Notes varchar(500),
	CreatedDate timestamp not null,
	IP varchar(20),
	TransToAdmin bit
);	

CREATE TABLE RequestType(
	RequestTypeId int not null GENERATED ALWAYS AS IDENTITY,
	CONSTRAINT pk_RequestType PRIMARY KEY(RequestTypeId),
	Name varchar(50) not null
);

CREATE TABLE RequestWiseFile(
	RequestWiseFileID int NOT NULL GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_RequestWiseFile PRIMARY KEY(RequestWiseFileID),
	RequestId int NOT NULL ,
	CONSTRAINT fk_RequestWiseFile
	FOREIGN KEY (RequestId)
	REFERENCES Request(RequestId),
	FileName varchar(500) NOT NULL,
	CreatedDate timestamp NOT NULL,
	PhysicianId int ,
	CONSTRAINT fk_RequestWiseFile1
	FOREIGN KEY (PhysicianId)
	REFERENCES Physician(PhysicianId),
	AdminId int ,
	CONSTRAINT fk_RequestWiseFile2
	FOREIGN KEY (AdminId)
	REFERENCES Admin(AdminId),
	DocType smallint,
	IsFrontSide bit ,
	IsCompensation bit,
	IP varchar(20) ,
	IsFinalize bit ,
	IsDeleted bit ,
	IsPatientRecords bit
);

CREATE TABLE Role(
RoleId int NOT NULL GENERATED ALWAYS AS IDENTITY ,
CONSTRAINT pk_Role PRIMARY KEY(RoleId),
Name varchar (50) NOT NULL,
AccountType smallint NOT NULL,
CreatedBy varchar(128) NOT NULL,
CreatedDate timestamp NOT NULL,
ModifiedBy varchar(128) ,
ModifiedDate timestamp ,
IsDeleted bit NOT NULL,
IP varchar(20)
);


CREATE TABLE RoleMenu(
	RoleMenuId int NOT NULL GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_RoleMenu PRIMARY KEY(RoleMenuId),
	RoleId int NOT NULL,
	MenuId int NOT NULL,
	CONSTRAINT fk_RoleMenu2
	FOREIGN KEY (MenuId)
	REFERENCES Menu(MenuId)
);

CREATE TABLE Shift(
	ShiftId int NOT NULL GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_Shift PRIMARY KEY(ShiftId),
	PhysicianId int NOT NULL,
	CONSTRAINT fk_shift
	FOREIGN KEY (PhysicianId)
	REFERENCES Physician(PhysicianId),
	StartDate date NOT NULL,
	IsRepeat bit NOT NULL,
	WeekDays char(7),
	RepeatUpto int,
	CreatedBy varchar (128) NOT NULL,
	CONSTRAINT fk_shift1 
	FOREIGN KEY (CreatedBy)
	REFERENCES AspNetUsers(id)
,
	CreatedDate timestamp NOT NULL,
	IP varchar(20)
);



CREATE TABLE ShiftDetail(
	ShiftDetailId int NOT NULL GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_ShiftDetail PRIMARY KEY(ShiftDetailId),
	ShiftId int NOT NULL,
	CONSTRAINT fk_ShiftDetails
	FOREIGN KEY (ShiftId)
	REFERENCES Shift(ShiftId),
	ShiftDate date NOT NULL,
	RegionId int ,
	StartTime timestamp NOT NULL,
	EndTime timestamp NOT NULL,
	Status smallint NOT NULL,
	IsDeleted bit NOT NULL,
	ModifiedBy varchar (128) ,
	CONSTRAINT fk_ShiftDetails1 
	FOREIGN KEY (ModifiedBy)
	REFERENCES AspNetUsers(Id)
,
	ModifiedDate timestamp,
	LastRunningDate timestamp,
	EventId varchar (100) ,
	IsSync bit 
);


CREATE TABLE ShiftDetailRegion(
	ShiftDetailRegionId int NOT NULL GENERATED ALWAYS AS IDENTITY ,
	CONSTRAINT pk_ShiftDetailRegion PRIMARY KEY(ShiftDetailRegionId),
	ShiftDetailId int NOT NULL,
	CONSTRAINT fk_ShiftDetailRegion
	FOREIGN KEY (ShiftDetailId)
	REFERENCES ShiftDetail (ShiftDetailId),
	RegionId int NOT NULL,
	CONSTRAINT fk_ShiftDetailRegion1
	FOREIGN KEY (RegionId)
	REFERENCES Region (RegionId),
	IsDeleted bit
);



CREATE TABLE SMSLog(
SMSLogID int NOT NULL GENERATED ALWAYS AS IDENTITY ,
CONSTRAINT pk_User PRIMARY KEY(SMSLogID),
SMSTemplate varchar NOT NULL,
MobileNumber varchar(50) NOT NULL,
ConfirmationNumber varchar(50),
RoleId int,
AdminId int,
RequestId int ,
PhysicianId int,
CreateDate timestamp NOT NULL,
SentDate timestamp ,
IsSMSSent bit ,
SentTries int NOT NULL,
Action int
);




CREATE TABLE Users(
UserId int NOT NULL GENERATED ALWAYS AS IDENTITY ,
CONSTRAINT pk_Users PRIMARY KEY(UserId),
AspNetUserId varchar(128) NOT NULL,
CONSTRAINT fk_Users1
FOREIGN KEY (AspNetUserId)
REFERENCES AspNetUsers(Id),
FirstName varchar(100) NOT NULL,
LastName varchar(100),
Email varchar(50) NOT NULL,
Mobile varchar(20),
IsMobile bit,
Street varchar(100),
City varchar(100),
State varchar(100),
RegionId int,
	CONSTRAINT fk_Users2 FOREIGN KEY(RegionId) REFERENCES Region(RegionId),
Zip varchar(10),
strMonth varchar(20),
intYear int,
intDate int,
CreatedBy varchar(128) NOT null,
CreatedDate timestamp NOT null,
ModifiedBy varchar(128),
ModifiedDate timestamp,
Status smallint,
IsDeleted bit,
IP varchar(20),
IsRequestWithEmail bit
)


using HelloDoc.DataContext;
using HelloDoc.DataModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace HelloDoc.Controllers
{
    public class CredentialController : Controller
    {
        private readonly HelloDocDbContext _context;
        public CredentialController(HelloDocDbContext context) { 
            _context = context;
        }
        [HttpPost]
        public async Task<IActionResult> Login(User user)
        {
            try
            {   
                var correct = await _context.Aspnetusers
                .FirstOrDefaultAsync(m => m.Email == user.Email);
                if (correct.Passwordhash == user.Aspnetuser.Passwordhash)
                {
                    return RedirectToAction("Index", "Home");
                }
                TempData["WrongPass"] = "Enter Correct Password";
                TempData["Style"] = " border-danger";
                return RedirectToAction("PatientLogin", "Home");
            }
            catch
            {
                TempData["Style"] = " border-danger";
                TempData["WrongEmail"] = "Enter Correct Email";
                return RedirectToAction("PatientLogin", "Home");
            }
        }
    }
}


